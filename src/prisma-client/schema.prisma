// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma-client"
}

model User {
  id           String       @id @default(uuid())
  username     String       @unique
  email        String       @unique
  passwordHash String
  score        Int          @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  threads      Thread[] // Usuário pode criar várias threads
  news         News[] // Usuário pode criar várias notícias
  validations  Validation[] // Validações realizadas pelo usuário

  scoreHistory        ScoreHistory[]
  threadSubscriptions ThreadSubscription[]
  newsEdit            NewsEdit[]

  userQuestions UserQuestion[]
}

model UserQuestion {
  id        String   @id @default(uuid())
  userId    String
  topicId   String
  question  String
  answered  Boolean  @default(false)
  answer    String?
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  topic Topic @relation(fields: [topicId], references: [id])
}

model Thread {
  id                String   @id @default(uuid())
  title             String   @unique
  descriptionPrompt String
  author            User     @relation(fields: [authorId], references: [id])
  authorId          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  topics            Topic[]
  news              News[]

  threadSubscriptions ThreadSubscription[]
}

model ThreadSubscription {
  id        String   @id @default(uuid())
  thread    Thread   @relation(fields: [threadId], references: [id])
  threadId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Topic {
  id            String   @id @default(uuid())
  title         String
  trendingScore Int      @default(0)
  thread        Thread   @relation(fields: [threadId], references: [id])
  threadId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  news          News[]

  userQuestions UserQuestion[]
}

model News {
  id              String       @id @default(uuid())
  title           String
  content         String
  validationScore Int          @default(0)
  thread          Thread       @relation(fields: [threadId], references: [id])
  threadId        String
  topic           Topic        @relation(fields: [topicId], references: [id])
  topicId         String
  author          User         @relation(fields: [authorId], references: [id])
  authorId        String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  issues          Issue[]
  validations     Validation[]

  scoreHistory ScoreHistory[]
  newsEdit     NewsEdit[]
}

model NewsEdit {
  id         String   @id @default(uuid())
  newsId     String
  editedById String
  oldContent String
  newContent String
  createdAt  DateTime @default(now())

  news     News @relation(fields: [newsId], references: [id])
  editedBy User @relation(fields: [editedById], references: [id])
}

model Issue {
  id            String     @id @default(uuid())
  news          News       @relation(fields: [newsId], references: [id])
  newsId        String
  type          IssueType
  description   String
  positionStart Int?
  positionEnd   Int?
  sentiment     Sentiment?
  createdAt     DateTime   @default(now())
}

model Validation {
  id                     String           @id @default(uuid())
  news                   News             @relation(fields: [newsId], references: [id])
  newsId                 String
  validatedBy            User             @relation(fields: [validatedByUserId], references: [id])
  validatedByUserId      String
  info                   String?
  isCorrectionSuggestion Boolean          @default(false)
  status                 ValidationStatus @default(pending)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
}

model ScoreHistory {
  id              String   @id @default(uuid())
  userId          String
  newsId          String   @unique // Relação 1:1 com News
  validationScore Int
  scoreIncrement  Int
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  news News @relation(fields: [newsId], references: [id])
}

// Enum para o tipo de Issue
enum IssueType {
  bias
  subjectivity
  contradiction
  ad
  false_fact
  off_topic
  opinion
  sentiment_bias
}

// Enum para o sentimento
enum Sentiment {
  positive
  negative
  neutral
}

// Enum para o status da validação
enum ValidationStatus {
  pending
  accepted
  rejected
  no_answer
}
